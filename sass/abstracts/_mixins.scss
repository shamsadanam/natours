@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin absCenter {
  position: absolute;
  top: 0;
  left: 0;
  transform: translate(-50%, -50%);
}

// media query manager
// basecode > tab-land > tab-port > phone (screen size comparison)

@mixin respond($br) {
  @if ($br==xsm) {
    @media only screen and (max-width: 31.25em) {
      // 500px and less than
      @content;
    }
  }
  @if ($br==phone) {
    @media only screen and (max-width: 37.5em) {
      // 600px less than
      @content;
    }
  }

  @if ($br==tab-sm) {
    @media only screen and (max-width: 51.875em) {
      // 830px less than
      @content;
    }
  }

  @if ($br==tab-port) {
    @media only screen and (max-width: 56.25em) {
      //900px
      @content;
    }
  }
  @if ($br==tab-land) {
    @media only screen and (max-width: 75em) {
      //1200px
      @content;
    }
  }

  @if ($br==big-desktop) {
    @media only screen and (min-width: 112.5em) {
      //1800px
      @content;
    }
  }
  // all the code wriiten(base code) as for the screens between 1200px(75em) to 1800px(112em)
  //desktop first approach
  // if base code is for a bigger screen (than code for screens now to write) then MAX-WIDTH condition is used to write codes for smaller screens than base code

  //mobile first approach
  // if base code is for a smaller screen (than code for screens now to write) then MIN-WIDTH condition is used to write codes for bigger screens than base code
}
